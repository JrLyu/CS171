=============================================================================
Instructions:

   IMPORTANT:
   You must use a plain editor like "notepad" to work on this assignment
   (Do NOT use fancy text editors like Windows Word)
   We do not accept Rich Text format; only plain text files as answer

   Write the derivation of the runtime complexity (in exactly formula)
   for the loops/recursive function.

   Use indentation (with spaces) to line up the test if necessary to
   make your equations "pretty"
=============================================================================


Answer to question 1:
==========================

What is the runtime complexity (in exact formula) for the following
program fragment (i.e.: how many times is doPrimitive() executed
expressed in term of N):

    for (i = 0; i < N; i = i + 2)
        for (j = i; j < N; j++)
            doPrimitive();


    i = 0       2       4       6       8   ...    N-2
    j = 0       2       4       6       8   ...    N-2
        1       3       5       7       9   ...    N-1
        2       4       6       8       10  ...
        3       5       7       9       11  ...
        ...     N-1     N-1     N-1     N-1 ...
        N-1
    sum: N      N-2     N-4     N-6     N-8 ...    2

    # Iterations = N + (N-2) + (N-4) + (N-6) + (N-8) + ... + 2
                 = ((N + 2) * (N/2))/2      by arithmetic series
                 = (N^2 + 2N)/4
                 = N^2/4 + N/2



Answer to question 2:
==========================

What is the runtime complexity (in exact formula) for the following
recursive function where b-a is the input size (i.e.: how many times
is doPrimitive() executed expressed in term of N = b-a):

   public static void recurse(int[] A, int a, int b)
   {
       if ( b - a <= 1 )
	        return;          	// 0 times

       for (int i = a; i < b; i++)
           doPrimitive();	// b-a = N times
       recurse(A, a, (a+b)/2);
       recurse(A, (a+b)/2, b);
   }

   Let C(N) = # of times doPrimitive() is executed.
   C(1) = 0 --> base case
   C(N) = N + C(N/2) + C(N/2) = N + 2*C(N/2) as n > 1
        because: 1st recurse() call: a = a, b = (a+b)/2  -->  b-a = (a+b)/2 - a
                                                                  = (b-a)/2 = N/2 --> # of doPrimitive() calls = C(N/2)
                 2nd recurse() call: a = (a+b)/2, b = b  -->  b-a = b - (a+b)/2
                                                                  = (b-a)/2 = N/2 --> # of doPrimitive() calls = C(N/2)
   Let's use the telescoping technique:
   C(N) = N + 2*C(N/2)           --> C(N/2) = N/2 + 2C(N/4)
        = N + 2(N/2 + 2*C(N/4)) [= N + N + 4*C(N/4)]
        = N + N + 4(N/4 + 2*C(N/8)) [= N + N + N + 8*C(N/8)]
        ...
        = N + N + N + N + ... + N + 2^k*C(N/2^k))       [We are adding up N for k times]
        = k*N + 2^k*C(N/2^k))
   Eventually, we want N/2^k = 1 --> N = 2^k --> k = log(N)
   C(N) = k*N + 2^k*C(1)
        = N*log(N) + 0
        = N*log(N)

    # Iterations = N*log(N)



